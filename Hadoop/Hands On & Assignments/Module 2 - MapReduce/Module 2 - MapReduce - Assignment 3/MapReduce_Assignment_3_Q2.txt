import java.io.*;

import org.apache.hadoop.io.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.conf.*;

import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;

public class Percent {
    public static class MapClass extends Mapper<LongWritable, Text, Text, IntWritable> {
        private Text vehicleNumber = new Text();
        private IntWritable speed = new IntWritable();

        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            try {
                String[] parts = value.toString().split(",");
                int recordedSpeed = Integer.parseInt(parts[1].trim());
                if (recordedSpeed > 65) {
                    vehicleNumber.set(parts[0]);
                    speed.set(recordedSpeed);
                    context.write(vehicleNumber, speed);
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }

    public static class ReduceClass extends Reducer<Text, IntWritable, Text, FloatWritable> {
        private FloatWritable result = new FloatWritable();

        public void reduce(Text key, Iterable<IntWritable> values, Context context)
                throws IOException, InterruptedException {
            int countAbove65 = 0;
            int totalCount = 0;
            for (IntWritable val : values) {
                totalCount++;
                if (val.get() > 65) {
                    countAbove65++;
                }
            }
            float percentage = ((float) countAbove65 / totalCount) * 100;
            result.set(percentage);
            context.write(key, result);
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "SpeedAnalysis");
        job.setJarByClass(Percent.class);
        job.setMapperClass(MapClass.class);
        job.setReducerClass(ReduceClass.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        job.setInputFormatClass(TextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}